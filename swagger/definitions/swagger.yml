openapi: "3.0.0"
info:
  title: Users Service
  version: 1.0.0
  description: Users Service API documentation
servers:
  - url: http://localhost:5001
  - url: http://stage.onelike.gusisoft.cl
tags:
  - name: Authenticate
    description: Authenticate Operations
  - name: Users
    description: User Operations
  - name: Service Health
    description: Service Health Status
paths:
  /users-service/health:
    get:
      tags:
        - Service Health
      summary: Service health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"
  /auth/login:
    post:
      tags:
        - Authenticate
      summay: Authenticate User
      description: Login User
      requestBody:
        description: Login data
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/schemas/Login"
      responses:
        '200':
          description: User logued in.
          content:
            application/json:
              schema:
                type: string
                description: 'Auth Bearer Token'

        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#components/responses/BadRequest"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#components/responses/NotFound"
  /auth/logout:
    get:
      tags:
        - Authenticate
      summay: Logout User
      description: Logout User
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User logued out.
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#components/responses/Forbidden"

  /auth/status:
    get:
      tags:
        - Authenticate
      summay: Authenticate Status
      description: Get Authenticate Status
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authenticate Status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    description: 'Authenticate Status'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#components/responses/Forbidden"
  /users:
    get:
      tags:
        - Users
      summary: List Users
      description: List Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List Users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/User"
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#components/responses/Forbidden"
    post:
      tags:
        - Users
      summary: Create User
      description: Creates a new User
      security:
        - bearerAuth: []
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User successfully created.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#components/responses/BadRequest"
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#components/responses/Forbidden"
  /users/byIds/{ids}:
    get:
      tags:
        - Users
      summary: List Users filtered by id
      description: List Users filtered by ids
      security:
        - bearerAuth: []
      parameters:
        - name: ids
          in: path
          description: Comma separated users ids (eg. 1,2,3,4)
          required: true
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: Users list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/User"
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#components/responses/Forbidden"
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get User
      description: Get an existing User
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User succesfullt retreived.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#components/responses/NotFound"
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#components/responses/Forbidden"
    put:
      tags:
        - Users
      summary: Update User
      description: Update an existing User
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User successfully updated.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#components/responses/BadRequest"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#components/responses/NotFound"
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#components/responses/Forbidden"
    delete:
      tags:
        - Users
      summary: Delete User
      description: Delete an existing User
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User successfully deleted.
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#components/responses/NotFound"
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#components/responses/Forbidden"
components:
  schemas:
    Login:
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password
    UserCreate:
      allOf:
        - $ref: "#/components/requestBodies/UserBase"
        - required:
          - first_name
          - last_name
          - email
          - password
          properties:
            password:
              type: string
              description: User password
    UserUpdate:
      allOf:
        - $ref: "#/components/requestBodies/UserBase"
        - required:
          - first_name
          - last_name
          - email
    User:
      allOf:
        - $ref: "#/components/requestBodies/UserBase"
        - required:
          properties:
            id:
              type: integer
              format: int64
              description: User id
            first_name:
              type: string
              description: User first name
            last_name:
              type: string
              description: User last name
            email:
              type: string
              description: User email
            active:
              type: boolean
              description: User active status
            created:
              type: string
              format: date-time
              description: Created datetime
            created_by:
              type: integer
              description: User id who creates this
            updated:
              type: string
              format: date-time
              description: Updated datetime
            updated_by:
              type: integer
              description: User id who updates this
    Health:
      properties:
        message:
          type: string
          description: Health status
  requestBodies:
    UserBase:
      properties:
        first_name:
          type: string
          description: User first name
        last_name:
          type: string
          description: User last name
        email:
          type: string
          description: User email
  responses:
    BadRequest:
      properties:
        message:
          type: string
          description: Error cause
    NotFound:
      properties:
        message:
          type: string
          description: Error cause
    Forbidden:
      properties:
        message:
          type: string
          description: Error cause

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
